// Generated by CoffeeScript 1.8.0
(function() {
  var async, classMap, crypto, dictionary, randomToken, redisHelper, userDao, util;

  randomToken = function() {
    return crypto.randomBytes(20).toString("hex");
  };

  userDao = require(ROOT + "dao/userDao");

  dictionary = require(ROOT + "config/dictionary");

  crypto = require("crypto");

  redisHelper = require(ROOT + "dao/redisHelper");

  util = require(ROOT + "util/util");

  async = require("async");

  exports.register = function(user, callback) {
    userDao.queryByName(loginName, function(results) {
      if (results && results.length > 0) {
        callback({
          errCode: 1,
          msg: dictionary.errCode[1]
        }, false);
      } else {
        user.accessToken = randomToken();
        redisHelper.redis(function(err, client) {
          client.set("user-token-" + user.loginName, user.accessToken);
        });
        userDao.insert(user);
        callback(user, true);
      }
    });
  };

  exports.login = function(user, callback) {
    var loginName;
    if (!user.loginName || !user.password) {
      callback({
        errCode: 2,
        msg: dictionary.errCode[2]
      }, false);
      return;
    }
    loginName = user.loginName;
    userDao.queryByName(loginName, function(results) {
      if (results && results.length > 0) {
        if (user.password === results[0].password) {
          user.accessToken = randomToken;
          redisHelper.redis(function(err, client) {
            client.set("user-token-" + user.loginName, user.accessToken);
          });
          callback(user, true);
        } else {
          callback({
            errCode: 4,
            msg: dictionary.errCode[4]
          }, false);
        }
      } else {
        callback({
          errCode: 3,
          msg: dictionary.errCode[3]
        }, false);
      }
    });
  };

  exports.thirdLogin = function(user, callback) {
    var loginName;
    if (!user.nickname) {
      callback({
        errCode: 2,
        msg: dictionary.errCode[2]
      }, false);
      return;
    }
    loginName = user.loginName;
    userDao.queryByParams({
      thirdLogin: user.thirdLogin,
      openId: user.openId
    }, function(results) {
      if (results && results.length > 0) {
        callback(results[0], true);
      } else {
        user.password = randomToken();
        async.waterfall([
          function(next) {
            return userDao.insert(user, function(results) {
              user.id = results.insertId;
              next();
            });
          }, function(next) {
            return userDao.registXMPP(user, function(results) {
              return next(user, true);
            });
          }
        ], callback);
      }
    });
  };

  exports.addUserAction = function(userAction, callback) {
    userDao.insertUserAction(userAction, util.resultHandle(callback, 5));
  };

  exports.queryUserFavorites = function(params, callback) {
    params.type = 1;
    userDao.queryUserAction(params, util.resultHandle(callback, 5));
  };

  exports.queryUserFavorite = function(params, callback) {
    params.type = 1;
    userDao.queryUserAction(params, util.resultHandle(callback, 5));
  };

  exports.queryUserLike = function(params, callback) {
    params.type = 2;
    userDao.queryUserAction(params, util.resultHandle(callback, 5));
  };

  classMap = {};

  exports.addToLike = function(user, post, callback) {
    var publish;
    publish = AV.Object["new"]('Comment');
    publish.set('objectId', post);
    return userDao.queryByParam('Like', {
      author: user,
      post: publish
    }, function(error, results) {
      if (error) {
        return callback(error, null);
      } else {
        if (results.length > 0) {
          return callback(null, '已经赞过');
        } else {
          return userDao.insert('Like', {
            author: user,
            post: publish
          }, function(error, result) {
            if (!error) {
              return callback(null, '成功赞');
            }
          });
        }
      }
    });
  };

}).call(this);
