// Generated by CoffeeScript 1.8.0
(function() {
  var businessAddressDao, businessDao, businessImageDao, businessPromotionDao, businessReviewDao, config, daoHelper, dateutil, end, geoService, geolib, logger, ngeohash, queryFromDB, queryFromSolr, redisHelper, util;

  end = function(client) {
    client.end();
  };

  businessDao = require(ROOT + "dao/businessDao");

  businessAddressDao = require(ROOT + "dao/businessAddressDao");

  businessImageDao = require(ROOT + "dao/businessImageDao");

  businessPromotionDao = require(ROOT + "dao/businessPromotionDao");

  businessReviewDao = require(ROOT + "dao/businessReviewDao");

  redisHelper = require(ROOT + "dao/redisHelper");

  config = require(ROOT + "config/config");

  geolib = require("geolib");

  ngeohash = require("ngeohash");

  logger = require("log4js").getLogger(__filename);

  util = require("util");

  dateutil = require("dateutil");

  daoHelper = require(ROOT + "dao/daoHelper");

  geoService = require(ROOT + "service/geoService");

  exports.insert = function(business, callback) {
    businessDao.queryBySourceId(business.sourceId, function(results, error) {
      if (results.length === 0) {
        businessDao.insert(business, callback);
      }
      if (callback) {
        callback();
      }
    });
  };

  queryFromSolr = function(obj, callback) {
    var param;
    param = {
      start: obj.p * 100,
      pt: obj.latitude + ',' + obj.longitude,
      q: obj.q ? obj.q : '*'
    };
    return geoService.queryNearby(param, function(err, results) {
      if (err) {
        callback(err);
        return;
      }
      return queryFromDB(obj, results, callback);
    });
  };

  queryFromDB = function(obj, ids, callback) {
    return businessDao.queryByIds(ids, function(results, err) {
      var i, idMap, j, _i, _j, _len, _len1;
      if (err) {
        callback(err, null);
        return;
      }
      idMap = {};
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        i = results[_i];
        idMap['business_' + i.id] = i;
      }
      results = [];
      for (_j = 0, _len1 = ids.length; _j < _len1; _j++) {
        i = ids[_j];
        j = idMap[i.id];
        j.distance = parseInt(i.distance * 1000);
        results.push(j);
      }
      redisHelper(function(err, client) {
        if (!err) {
          return client.set("geohash-" + obj.geohash + "-q" + obj.q + "-p" + obj.p, JSON.stringify(results), function(err, reply) {
            return client.end();
          });
        }
      });
      return callback(err, results);
    });
  };

  exports.queryNearby = function(obj, callback) {
    if (!obj.p) {
      obj.p = 0;
    }
    if (!obj.q) {
      obj.q = '*';
    }
    obj.geohash = ngeohash.encode(obj.latitude, obj.longitude);
    redisHelper(function(err, client) {
      if (!err) {
        client.get("geohash-" + obj.geohash + "-q" + obj.q + "-p" + obj.p, function(err, reply) {
          var arr;
          client.end();
          if (!reply) {

            /*
            arr = []
            hashArr = ngeohash.bboxes(1 * obj.latitude - 0.01, 1 * obj.longitude - 0.01, 1 * obj.latitude + 0.01, 1 * obj.longitude + 0.01, 6)
            businessDao.queryGeoLike hashArr, (results) ->
              arr = geolib.orderByDistance(obj, results)
              for i of arr
                distance = arr[i].distance
                arr[i] = results[arr[i].key]
                arr[i].distance = distance
              i = 0
              info = total: arr.length
              while arr.length > 0
                subArr = arr.splice(0, 100)
                if i is 0
                  logger.error "[" + __function + ":" + __line + "] " + "response"
                  callback subArr
                redisHelper (err, client) ->
                  client.set "geohash-" + obj.geohash + "-p" + i, JSON.stringify(subArr), (err, reply) ->
                    client.end()
                    return
            
                  return
            
                i++
              info.pNum = i
              redisHelper (err, client) ->
                client.set "geohash-info-" + obj.geohash, JSON.stringify(info), (err, reply) ->
                  client.end()
                  return
            
                return
            
              callback arr
              return
             */
            queryFromSolr(obj, callback);
          } else {
            arr = JSON.parse(reply);
            callback(null, arr);
          }
        });
      } else {
        queryFromSolr(obj, callback);
      }
    });
  };

  exports.queryComments = function(obj, callback) {
    businessDao.queryComments(obj, function(results) {
      for (obj in results) {
        obj = results[obj];
        if (util.isDate(obj.createDate)) {
          obj.createDate.setHours(obj.createDate.getHours() + 8);
          obj.createDate = dateutil.format(obj.createDate, "Y-m-d H:i");
        } else {
          obj.createDate = "";
        }
      }
      callback(results);
    });
  };

  exports.addReview = function(obj, callback) {
    businessReviewDao.insert(obj, callback);
  };

}).call(this);
